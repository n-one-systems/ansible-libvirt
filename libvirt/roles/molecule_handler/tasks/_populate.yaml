# ./roles/molecule_handler/tasks/_populate.yaml
# nsys-ai-claude-3.5

- name: Assert that all expected vars are defined
  ansible.builtin.assert:
    that:
      - DOMAIN_SPECS is defined and DOMAIN_SPECS | length > 0 or (CLONES is defined and CLONES | length > 0)
      - INTERFACE_REFERENCE is defined

- name: Initialize instance configuration and merge expected domain lists
  ansible.builtin.set_fact:
    instance_conf: []
    _expected_domains: "{{ ((DOMAIN_SPECS | default([]) | map(attribute='name')) | list) + ((CLONES | default([]) | map(attribute='name')) | list) }}"
    default_molecule_oob_network_name: "{{ _oob_network.name | default('molecule_oob') }}"

- name: Get domain information from libvirt
  ansible.builtin.set_fact:
    domain_info: "{{ lookup('nsys.libvirt.domain.info', item) }}"
  loop: "{{ _expected_domains }}"
  register: domain_lookups

- name: Get network information for default molecule OOB network
  ansible.builtin.set_fact:
    oob_network_info: "{{ lookup('nsys.libvirt.network.info', default_molecule_oob_network_name) }}"

- name: Get interface references for each domain
  ansible.builtin.set_fact:
    domain_interfaces: "{{ INTERFACE_REFERENCE | selectattr('target_domain', 'equalto', item) | 
                          selectattr('reference', 'equalto', default_molecule_oob_network_name) | list }}"
  loop: "{{ _expected_domains }}"
  register: domain_interfaces

- name: Build instance configuration dictionary
  ansible.builtin.set_fact:
    instance_conf: "{{ instance_conf + [host_config] }}"
  vars:
    oob_interface: "{{ domain_interfaces.results[idx].ansible_facts.domain_interfaces | 
                       selectattr('reference', 'equalto', default_molecule_oob_network_name) | first }}"
    host_config:
      instance: "{{ item }}"
      address: "{{ oob_interface.ip | ansible.utils.ipaddr('address') }}"
      user: "{{ DEFAULT_USER }}"
      port: 22
      identity_file: "{{ SSH_PRIVATE_KEY }}"
      become_method: sudo
      become: true
  loop: "{{ _expected_domains }}"
  loop_control:
    index_var: idx
  when: domain_interfaces.results[idx].ansible_facts.domain_interfaces | length > 0

- name: Write instance config file
  ansible.builtin.copy:
    content: |
      # Molecule managed
      # Created by nsys.libvirt.molecule_handler
      {{ instance_conf | to_json | from_json | to_yaml }}
    dest: "{{ molecule_instance_config }}"
    mode: "0600"

- name: Debug instance configuration
  ansible.builtin.debug:
    var: instance_conf
  when: ansible_verbosity >= 1
