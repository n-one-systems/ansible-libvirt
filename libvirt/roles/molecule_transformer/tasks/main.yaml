- name: Base Assert Molecule variable integrity
  # we do not allow duplicated names
  block:
  - name: Assert that the required variables are defined
    assert:
      that:
        - PROJECT_NAME is defined
        - state is defined
        - state in ['present', 'absent']
        - PROJECT_BASE_DIR is defined
      quiet: true
  - name: Extract Domain/Clone/Network/Disk Specs for processing
    set_fact:
      _vm_specs: "{{ molecule_yml.platforms | selectattr('type', 'equalto', 'vm') | list | default([]) }}"
      _network_specs: "{{ molecule_yml.platforms | selectattr('type', 'equalto', 'network') | list | default([]) }}"
      _disk_specs: "{{ molecule_yml.platforms | selectattr('type', 'equalto', 'disk')  | list | default([]) }}"
      _clone_specs: "{{ molecule_yml.platforms | selectattr('type', 'equalto', 'clone') | list | default([]) }}"
      _global_specs: "{{ molecule_yml.provisioner.config_options.libvirt_defaults | default({}) }}"

  - name: Debug - input date passed to transformer
    ansible.builtin.debug:
      msg:
      - "VM Specs:"
      - "{{ _vm_specs }}"
      - "Network Specs:"
      - "{{ _network_specs }}"
      - "Disk Specs:"
      - "{{ _disk_specs }}"
      - "Clone Specs:"
      - "{{ _clone_specs }}"
      - "Global Specs:"
      - "{{ _global_specs }}"
    when: ansible_verbosity >= 1

  - name: collect all spec names
    ansible.builtin.set_fact:
      __vm_names: "{{ _vm_specs | map(attribute='name') | list }}"
      __network_names: "{{ _network_specs | map(attribute='name') | list }}"
      __disk_names: "{{ _disk_specs | map(attribute='name') | list }}"
      __clone_names: "{{ _clone_specs | map(attribute='name') | list }}"

  - name: Assert that names are unique
    ansible.builtin.assert:
      that: item | length == item | unique | length
      fail_msg: "Names have to be unique in same type"
      quiet: true
    when: item | length > 0
    loop:
      - "{{ __vm_names }}"
      - "{{ __network_names }}"
      - "{{ __disk_names }}"
      - "{{ __clone_names }}"


- name: Set and initialize the project meta vars
  ansible.builtin.set_fact:
    URI: "{{ _global_specs.uri | default(URI) }}"
    DEFAULT_USER: "{{ _global_specs.default_user | default(molecule_user) }}"
    DEFAULT_USER_PASSWORD: "{{ _global_specs.default_user_password | default(molecule_user_password) }}"
    SSH_PUB_KEY: "{{ _global_specs.ssh_key_path | default(molecule_ssh_private_key) }}"
    SSH_PRIVATE_KEY: "{{ _global_specs.ssh_key_path | default(molecule_ssh_private_key) }}"
    POOL_NAME: ""
    POOL_DIR: ""
    DISK_SPECS: []
    DISK_REFERENCE: []
    NETWORK_SPECS: []
    INTERFACE_REFERENCE: []
    DOMAIN_SPECS: []
    CLONE_SPECS: []

- name: Include storage transformation
  ansible.builtin.include_tasks: _storage.yaml

- name: Include network transformation
  ansible.builtin.include_tasks: _network.yaml

- name: Include domain transformation
  ansible.builtin.include_tasks: _domain.yaml
  when: __vm_names is defined and __vm_names | length > 0

- name: Include Cloning transformation
  ansible.builtin.include_tasks: _clone.yaml
  when: __clone_names is defined and __clone_names | length > 0

- name: Include Reference transformation
  ansible.builtin.include_tasks: _references.yaml
  vars:
    _oob_interface_specs: "{{ NETWORK_SPECS | selectattr('is_oob', 'defined') | selectattr('is_oob') | first }}"
  loop: "{{ _vm_specs + _clone_specs }}"
  loop_control:
    loop_var: domain

- name: DEBUG - block output
  when: ansible_verbosity >= 1
  block:
  - name: Debug - out project meta vars
    ansible.builtin.debug:
      msg:
      - "Project Name: {{ PROJECT_NAME }}"
      - "Project base dir: {{ PROJECT_BASE_DIR }}"
  - name: Debug - out domain specs
    ansible.builtin.debug:
      msg: "{{ DOMAIN_SPECS }}"
  - name: Debug - out clone specs
    ansible.builtin.debug:
      msg: "{{ CLONE_SPECS }}"
  - name: Debug - out network specs
    ansible.builtin.debug:
      msg: "{{ NETWORK_SPECS }}"
  - name: Debug - out interface references
    ansible.builtin.debug:
      msg: "{{ INTERFACE_REFERENCE }}"
  - name: Debug - out pool name
    ansible.builtin.debug:
      msg: "{{ POOL_NAME }}"
  - name: Debug - out pool dir
    ansible.builtin.debug:
      msg: "{{ POOL_DIR }}"
  - name: Debug - out Disk specs
    ansible.builtin.debug:
      msg: "{{ DISK_SPECS }}"
  - name: Debug - out disk references
    ansible.builtin.debug:
      msg: "{{ DISK_REFERENCE }}"
  - name: Debug - User Credentials
    ansible.builtin.debug:
      msg:
      - "User: {{ DEFAULT_USER }}"
      - "Password: {{ DEFAULT_USER_PASSWORD }}"